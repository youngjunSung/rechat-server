{"version":3,"file":"746.js","mappings":"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","sources":["webpack://sleact-ts-front/./src/components/Button.tsx","webpack://sleact-ts-front/./src/components/TextField.tsx","webpack://sleact-ts-front/./src/components/ChatBox.tsx","webpack://sleact-ts-front/./src/components/ChatList.tsx","webpack://sleact-ts-front/./src/components/Chat.tsx","webpack://sleact-ts-front/./src/hooks/useInput.ts","webpack://sleact-ts-front/./src/hooks/useSocket.ts","webpack://sleact-ts-front/./src/pages/DirectMessage.tsx","webpack://sleact-ts-front/./src/utils/fetcher.ts","webpack://sleact-ts-front/./src/utils/makeSection.ts"],"sourcesContent":["import React from 'react';\r\n\r\ninterface ButtonProps {\r\n  className?: string;\r\n  text: string;\r\n  onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n}\r\n\r\nexport const Button: React.FC<ButtonProps> = ({ className, text, onClick }) => {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      onClick={onClick}\r\n      className={`flex items-center justify-center min-h-[54px] px-[10px] w-full bg-primary text-white rounded-[8px] text-[16px] font-bold ${className}`}\r\n    >\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n","import React, { memo } from 'react';\r\n\r\ninterface TextFieldProps {\r\n  id?: string;\r\n  label?: string;\r\n  type?: React.HTMLInputTypeAttribute;\r\n  className?: string;\r\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  value?: string | number | readonly string[] | undefined;\r\n}\r\n\r\nexport const TextField: React.FC<TextFieldProps> = memo(({ id, label, type = 'text', className, onChange, value }) => {\r\n  // console.log(`${label} 렌더링!`);\r\n  return (\r\n    <div className={`flex flex-col [&:not(&:last-child)]:mb-[20px] ${className}`}>\r\n      <label htmlFor={id} className=\"mb-[4px] text-primary text-[14px] font-[500]\">\r\n        {label}\r\n      </label>\r\n      <input\r\n        type={type}\r\n        id={id}\r\n        className=\"py-[10px] border-b-[2px] border-primary border-solid rounded-none focus:outline-none\"\r\n        onChange={onChange}\r\n        value={value}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n","import React, { useRef, useEffect, useCallback } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport autosize from 'autosize';\r\nimport gravatar from 'gravatar';\r\nimport { Mention, MentionsInput, MentionsInputClass, SuggestionDataItem } from 'react-mentions';\r\nimport fetcher from '@utils/fetcher';\r\nimport useSWR from 'swr';\r\nimport { IUser, IDM } from '@typings/db';\r\n\r\ninterface ChatBoxProps {\r\n  chat: string;\r\n  onSubmit: (e: any) => void;\r\n  onChangeChat: (e: any) => void;\r\n  placeholder?: string;\r\n}\r\n\r\nexport const ChatBox = ({ chat, onSubmit, onChangeChat, placeholder }: ChatBoxProps) => {\r\n  const params = useParams();\r\n  const refTextarea = useRef<HTMLTextAreaElement>(null);\r\n  const {\r\n    data: workspaceMembers,\r\n    error: error4,\r\n    mutate: mutate4,\r\n  } = useSWR<IUser[] | undefined>(`/api/workspaces/${params.workspace}/members`, fetcher);\r\n  const onKeyDownChat = (e: React.KeyboardEvent) => {\r\n    // console.log(e);\r\n    if (e.key === 'Enter' && e.shiftKey === false && chat.trim()) {\r\n      // console.log(e);\r\n      onSubmit(e);\r\n    }\r\n  };\r\n  const renderSuggestion = useCallback(\r\n    (\r\n      suggestion: SuggestionDataItem,\r\n      search: string,\r\n      highlightedDisplay: React.ReactNode,\r\n      index: number,\r\n      focused: boolean,\r\n    ): React.ReactNode => {\r\n      if (!workspaceMembers) return;\r\n      return (\r\n        <button type=\"button\" className={`w-full flex ${focused ? `bg-gray-400` : `white`}`}>\r\n          <img src={gravatar.url(workspaceMembers[index].email, { s: '24px', d: 'retro' })} alt=\"\" />\r\n          <span>{highlightedDisplay}</span>\r\n        </button>\r\n      );\r\n    },\r\n    [],\r\n  );\r\n  useEffect(() => {\r\n    if (refTextarea.current) {\r\n      autosize(refTextarea.current);\r\n    }\r\n  }, []);\r\n  return (\r\n    <div className=\"px-[20px] pb-[20px]\">\r\n      <MentionsInput\r\n        rows={1} // autosize 플러그인 사용 시 기본 높이 제어 속성\r\n        inputRef={refTextarea}\r\n        value={chat}\r\n        onChange={onChangeChat}\r\n        onKeyDown={onKeyDownChat}\r\n        placeholder={placeholder}\r\n        allowSuggestionsAboveCursor\r\n        className=\"resize-none [&_textarea]:!p-[10px] p-[10px] border-[1px] border-gray-300 border-solid w-full rounded-[8px]\"\r\n      >\r\n        <Mention\r\n          appendSpaceOnAdd\r\n          trigger=\"@\"\r\n          data={workspaceMembers?.map((v) => ({ id: v.id, display: v.nickname })) || []}\r\n          renderSuggestion={renderSuggestion}\r\n        />\r\n      </MentionsInput>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useRef, useCallback, useMemo, forwardRef } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { IUser, IChat, IDM } from '@typings/db';\r\nimport gravatar from 'gravatar';\r\nimport dayjs from 'dayjs';\r\nimport { Scrollbars, positionValues } from 'react-custom-scrollbars';\r\nimport regexifyString from 'regexify-string';\r\nimport { Chat } from '@components';\r\n\r\ninterface ChatListProps {\r\n  chatData: { [key: string]: (IDM | IChat)[] };\r\n  setScrollValues: React.Dispatch<React.SetStateAction<positionValues | undefined>>;\r\n  setSize: (size: number | ((_size: number) => number)) => Promise<(IDM[] | IChat[])[] | undefined>;\r\n  isEmpty: boolean;\r\n  isReachingEnd: boolean;\r\n}\r\n\r\nexport const ChatList = forwardRef(\r\n  ({ chatData, setScrollValues, setSize, isEmpty, isReachingEnd }: ChatListProps, ref: React.LegacyRef<Scrollbars>) => {\r\n    const refScrollbars = useRef<Scrollbars>(null);\r\n    // const result = regexifyString({\r\n    //   input: chatData?.content,\r\n    //   pattern: /@\\[(.+?)]\\((\\d+?)\\)|\\n/g,\r\n    //   decorator(match, index) {\r\n    //     const arr: string[] | null = match.match(/@\\[(.+?)]\\((\\d+?)\\)/)!;\r\n    //     if (arr) {\r\n    //       return (\r\n    //         <Link key={match + index} to={`/workspace/${workspace}/dm/${arr[2]}`}>\r\n    //           @{arr[1]}\r\n    //         </Link>\r\n    //       );\r\n    //     }\r\n    //     return <br key={index} />;\r\n    //   },\r\n    // });\r\n    const handleScroll = useCallback(\r\n      (values: positionValues) => {\r\n        // setScrollValues(values);\r\n        if (values.scrollTop === 0 && !isReachingEnd) {\r\n          setSize((prevSize) => prevSize + 1).then(() => {\r\n            const current = (refScrollbars as React.MutableRefObject<Scrollbars>)?.current;\r\n            if (current) {\r\n              current.scrollTop(current.getScrollHeight() - values.scrollHeight);\r\n            }\r\n          });\r\n        }\r\n        console.log(values);\r\n      },\r\n      [refScrollbars, isReachingEnd, setSize],\r\n    );\r\n    return (\r\n      <Scrollbars ref={ref} onScrollFrame={handleScroll} autoHide>\r\n        <div className=\"flex flex-col flex-1 py-[16px] px-[20px]\">\r\n          {Object.entries(chatData).map(([date, chats]) => {\r\n            return (\r\n              <div key={date}>\r\n                <div className=\"center sticky top-[6px]\">\r\n                  <p className=\"px-[10px] py-[4px] border-[#eee] border-[1px] rounded-full text-[#777] text-[12px]\">\r\n                    {date}\r\n                  </p>\r\n                </div>\r\n                {chats.map((chat: any, idx: number) => {\r\n                  return <Chat key={chat.id} chat={chat} />;\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </Scrollbars>\r\n    );\r\n  },\r\n);\r\n","import React, { useRef, useCallback, useMemo } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { IUser, IChat, IDM } from '@typings/db';\r\nimport gravatar from 'gravatar';\r\nimport dayjs from 'dayjs';\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport regexifyString from 'regexify-string';\r\n\r\nexport const Chat = ({ chat }: { chat: IChat | IDM }) => {\r\n  const user = 'Sender' in chat ? chat.Sender : chat.User;\r\n  return (\r\n    <div className=\"flex items-start\">\r\n      <button type=\"button\" className=\"mt-[4px] flex items-center justify-center rounded-[4px] overflow-hidden\">\r\n        <img src={gravatar.url(user.email, { s: '24px', d: 'retro' })} alt=\"\" />\r\n      </button>\r\n      <div className=\"ml-[6px]\">\r\n        <div className=\"flex items-center mb-[4px]\">\r\n          <p className=\"text-[16px] text-black font-[600] mr-[4px]\">{user.nickname}</p>\r\n          <p className=\"text-[12px] text-gray-500 font-[400]\">{dayjs(chat.createdAt).format('h:mm A')}</p>\r\n        </div>\r\n        <p>{chat.content}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { Dispatch, SetStateAction, useState, useCallback } from 'react';\r\n\r\ntype ReturnTypes<T> = [T, Dispatch<SetStateAction<T>>, (e: React.ChangeEvent<HTMLInputElement>) => void];\r\n\r\nexport const useInput = <T>(initialData: T): ReturnTypes<T> => {\r\n  const [state, setState] = useState(initialData);\r\n  const handler = useCallback(\r\n    (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      setState(e.target.value as unknown as T);\r\n    },\r\n    [state],\r\n  );\r\n  return [state, setState, handler];\r\n};\r\n","import io from 'socket.io-client';\r\nimport { useCallback } from 'react';\r\n\r\nconst backUrl = 'http://localhost:3095';\r\n\r\nconst sockets: { [key: string]: SocketIOClient.Socket } = {};\r\nconst useSocket = (workspace?: string): [SocketIOClient.Socket | undefined, () => void] => {\r\n  const disconnect = useCallback(() => {\r\n    if (workspace) {\r\n      sockets[workspace].disconnect();\r\n      delete sockets[workspace];\r\n    }\r\n  }, [workspace]);\r\n  if (!workspace) {\r\n    return [undefined, disconnect];\r\n  }\r\n  if (!sockets[workspace]) {\r\n    sockets[workspace] = io.connect(`${backUrl}/ws-${workspace}`, {\r\n      transports: ['websocket'],\r\n    });\r\n  }\r\n  return [sockets[workspace], disconnect];\r\n};\r\n\r\nexport default useSocket;\r\n","import React, { useState, useCallback, useEffect, useRef } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport useSWR from 'swr';\r\nimport useSWRInfinite from 'swr/infinite';\r\nimport fetcher from '@utils/fetcher';\r\nimport gravatar from 'gravatar';\r\nimport { useInput } from '@hooks/useInput';\r\nimport { ChatBox, ChatList } from '@components';\r\nimport axios from 'axios';\r\nimport useSocket from '@hooks/useSocket';\r\nimport dayjs from 'dayjs';\r\nimport { Scrollbars, positionValues } from 'react-custom-scrollbars';\r\nimport { IUser, IChat, IDM } from '@typings/db';\r\nimport makeSection from '@utils/makeSection';\r\n\r\nconst DirectMessage = () => {\r\n  const { workspace, id } = useParams();\r\n  const [socket] = useSocket(workspace);\r\n\r\n  const refScrollbars = useRef<Scrollbars>(null);\r\n  const [scrollValues, setScrollValues] = useState<positionValues>();\r\n  const { data: userData, error, mutate } = useSWR(`/api/workspaces/${workspace}/users/${id}`, fetcher);\r\n  // const {\r\n  //   data: chatList,\r\n  //   error: error2,\r\n  //   mutate: mutate2,\r\n  // } = useSWR(`/api/workspaces/${workspace}/users/${id}`, fetcher);\r\n  // const {\r\n  //   data: chatData,\r\n  //   error: error2,\r\n  //   mutate: mutate2,\r\n  // } = useSWR<IDM[] | undefined>(`/api/workspaces/${workspace}/dms/${id}/chats?perPage=20&page=1`, fetcher);\r\n  const { data: myData } = useSWR('/api/users', fetcher);\r\n  const {\r\n    data: chatData,\r\n    error: error2,\r\n    mutate: mutate2,\r\n    setSize, // pape 수는 바꿔주는 역할\r\n  } = useSWRInfinite<IDM[]>(\r\n    (index) => `/api/workspaces/${workspace}/dms/${id}/chats?perPage=20&page=${index + 1}`, // page를 가지고 있는 함수\r\n    fetcher,\r\n  );\r\n  const isEmpty = chatData?.[0]?.length === 0;\r\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\r\n  const [chat, setChat, onChangeChat] = useInput('');\r\n  const onSubmit = useCallback(() => {\r\n    console.log('메세지 전송');\r\n    if (chat?.trim() && chatData) {\r\n      const savedChat = chat;\r\n      mutate2((prevChatData) => {\r\n        prevChatData?.[0].unshift({\r\n          id: (chatData[0][0]?.id || 0) + 1,\r\n          content: savedChat,\r\n          SenderId: myData.id,\r\n          Sender: myData,\r\n          ReceiverId: userData.id,\r\n          Receiver: userData,\r\n          createdAt: new Date(),\r\n        });\r\n        return prevChatData;\r\n      }, false).then(() => {\r\n        setChat('');\r\n        setTimeout(() => {\r\n          console.log('스크롤 이동2222');\r\n          refScrollbars.current?.scrollToBottom();\r\n        }, 100);\r\n      });\r\n      axios\r\n        .post(\r\n          `/api/workspaces/${workspace}/dms/${id}/chats`,\r\n          { content: chat },\r\n          {\r\n            withCredentials: true,\r\n          },\r\n        )\r\n        .then(() => {\r\n          setChat('');\r\n          mutate2();\r\n          refScrollbars.current?.scrollToBottom();\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }, [chat]);\r\n  useEffect(() => {\r\n    socket?.on('dm', (data: number[]) => {\r\n      // data 새로 온 DM 데이터\r\n      console.log('메세지 수신');\r\n      mutate2();\r\n    });\r\n    return () => {\r\n      socket?.off('dm');\r\n    };\r\n  }, []);\r\n  useEffect(() => {\r\n    if (chatData?.length === 1) {\r\n      setTimeout(() => {\r\n        console.log('스크롤 이동111');\r\n        refScrollbars.current?.scrollToBottom();\r\n      }, 100);\r\n    }\r\n  }, [chatData]);\r\n  console.log(chatData);\r\n  const remakedChatData = makeSection(chatData ? [...chatData].flat().reverse() : []);\r\n  return (\r\n    <>\r\n      <div className=\"flex items-center py-[16px] px-[20px] border-b border-b-[#eee]\">\r\n        <h3 className=\"flex items-center text-[18px] font-bold text-black\">\r\n          <button type=\"button\" className=\"mt-[4px] flex items-center justify-center rounded-[4px] overflow-hidden\">\r\n            <img src={gravatar.url(userData?.email, { s: '24px', d: 'retro' })} alt=\"\" />\r\n          </button>\r\n          <span className=\"ml-[10px]\">{userData?.email}</span>\r\n        </h3>\r\n      </div>\r\n      <ChatList\r\n        chatData={remakedChatData}\r\n        ref={refScrollbars}\r\n        setScrollValues={setScrollValues}\r\n        setSize={setSize}\r\n        isEmpty={isEmpty}\r\n        isReachingEnd={isReachingEnd}\r\n      />\r\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmit={onSubmit} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DirectMessage;\r\n","import axios from 'axios';\r\n\r\nconst fetcher = (url: string) =>\r\n  axios\r\n    .get(url, {\r\n      // 프론트 서버와 백엔드 서버의 도메인이 다를 경우에도 백엔드에서 생성한 쿠키를 프론트로 주고 받게 할 수 있는 옵션\r\n      withCredentials: true,\r\n    })\r\n    .then((response) => response.data);\r\n\r\nexport default fetcher;\r\n","import dayjs from 'dayjs';\r\nimport { IUser, IChat, IDM } from '@typings/db';\r\n\r\nconst makeSection = (chatData: (IDM | IChat)[]) => {\r\n  return chatData.reduce((a, c) => {\r\n    if (!a[dayjs(c.createdAt).format('YYYY-MM-DD')]) {\r\n      a[dayjs(c.createdAt).format('YYYY-MM-DD')] = [c];\r\n    } else {\r\n      a[dayjs(c.createdAt).format('YYYY-MM-DD')].push(c);\r\n    }\r\n    return a;\r\n  }, {} as { [key: string]: (IDM | IChat)[] });\r\n};\r\n\r\nexport default makeSection;\r\n"],"names":["Button","_ref","className","text","onClick","React","type","concat","TextField","memo","id","label","_ref$type","onChange","value","htmlFor","ChatBox","chat","onSubmit","onChangeChat","placeholder","params","useParams","refTextarea","useRef","_useSWR","useSWR","workspace","fetcher","workspaceMembers","data","renderSuggestion","error","mutate","useCallback","suggestion","search","highlightedDisplay","index","focused","src","gravatar","email","s","d","alt","useEffect","current","autosize","MentionsInput","rows","inputRef","onKeyDown","e","key","shiftKey","trim","allowSuggestionsAboveCursor","Mention","appendSpaceOnAdd","trigger","map","v","display","nickname","ChatList","forwardRef","ref","chatData","setSize","setScrollValues","isReachingEnd","isEmpty","refScrollbars","handleScroll","values","scrollTop","prevSize","then","getScrollHeight","scrollHeight","console","log","Scrollbars","onScrollFrame","autoHide","Object","entries","_ref2","_ref3","date","chats","idx","Chat","user","Sender","User","dayjs","createdAt","format","content","useInput","initialData","_useState2","useState","state","setState","handler","target","sockets","disconnect","io","transports","undefined","_chatData$","_chatData","_useParams","socket","_slicedToArray","useSocket","userData","myData","_useSWRInfinite","useSWRInfinite","mutate2","length","_useInput2","setChat","savedChat","prevChatData","_chatData$0$","unshift","SenderId","ReceiverId","Receiver","Date","setTimeout","_refScrollbars$curren","scrollToBottom","axios","withCredentials","_refScrollbars$curren2","catch","on","off","_refScrollbars$curren3","remakedChatData","makeSection","flat","reverse","url","response","reduce","a","c","push"],"sourceRoot":""}